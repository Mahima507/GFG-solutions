//{ Driver Code Starts
import java.util.*;
import java.io.*;

class Gfg {
    public static void main(String args[])throws IOException
    {
        BufferedReader in=new BufferedReader(new InputStreamReader(System.in));
        PrintWriter out=new PrintWriter(System.out);
        int t=Integer.parseInt(in.readLine());
        while(t-->0){
            
            String s[]=in.readLine().trim().split(" ");
            int n=Integer.parseInt(s[0]);
            int m=Integer.parseInt(s[1]);
            char c[][]=new char[n][m];
            for(int i=0;i<n;i++){
                s=in.readLine().trim().split(" ");
                for(int j=0;j<m;j++){
                    c[i][j]=s[j].charAt(0);
                }
            }
            Solution ob=new Solution();
            int ans[][]=ob.chefAndWells(n, m, c);

            for(int i=0;i<n;i++){
                for(int j=0;j<m;j++){
                    out.print(ans[i][j]+" ");
                }
                out.println();
            }
        }
        out.close();
    }
}
// } Driver Code Ends


//User function Template for Java

class pair
{
    int first,second;
    pair(int first,int second){
        this.first=first;
        this.second=second;
    }
}
class Solution
{
    public int[][] chefAndWells(int n,int m,char c[][])
    {
         int ans[][] = new int[n][m];
        for(int []temp:ans){
            Arrays.fill(temp,-1);
        }
        Queue<pair> q = new LinkedList<>();
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(c[i][j]=='W'){
                    q.add(new pair(i,j));
                    ans[i][j]=0;
                }
            }
        }
        int x[] = {-1,1,0,0};
        int y[] = {0,0,-1,1};
        while(q.size()!=0){
            pair temp = q.remove();
            int i = temp.first;
            int j = temp.second;
            for(int k=0;k<4;k++){
                int newi=i+x[k];
                int newj=j+y[k];
                if(newi<n && newi>=0 && newj<m && newj>=0 
                && c[newi][newj]!='N' && ans[newi][newj]==-1){
                    ans[newi][newj]=ans[i][j]+1;
                    q.add(new pair(newi,newj));
                }
            }
        }
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(c[i][j]=='N' || c[i][j]=='.')ans[i][j]=0;
                else if(ans[i][j]!=-1)ans[i][j]*=2;
            }
        }
        return ans;
    
    }
}
